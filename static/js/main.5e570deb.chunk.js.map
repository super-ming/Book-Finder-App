{"version":3,"sources":["Components/context.js","Components/bookcard.js","Components/searchbar.js","Components/books.jsx","serviceWorker.js","index.js","App.js"],"names":["Context","createContext","key","url","startIndex","maxResults","query","isLoading","BookCard","_ref","books","_useContext","useContext","data","console","log","react_default","a","createElement","className","Object","keys","length","items","map","item","id","src","concat","volumeInfo","imageLinks","smallThumbnail","alt","title","authors","publisher","href","SearchBar","setQuery","setIsLoading","setData","setIsError","error","_useState","useState","_useState2","slicedToArray","isEmpty","setIsEmpty","input","useRef","useEffect","current","focus","handleSubmit","asyncToGenerator","regenerator_default","mark","_callee","e","mainUrl","response","json","wrap","_context","prev","next","preventDefault","fetch","sent","ok","Error","status","t0","message","stop","_x","apply","this","arguments","onSubmit","htmlFor","type","value","onChange","target","ref","onClick","Books","totalItems","Components_bookcard","Boolean","window","location","hostname","match","ReactDOM","render","_useState3","_useState4","_useState5","_useState6","search","setSearch","_useState7","_useState8","_useState9","_useState10","isError","_useState11","_useState12","setUrl","Provider","Components_searchbar","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e570deb.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const Context = createContext({\r\n    key: 'AIzaSyCxeE_F8Evvzj21h51vdXtYPZvcIsTvAn0',\r\n    url: 'https://www.googleapis.com/books/v1/volumes',\r\n    startIndex: 0,\r\n    maxResults: 10,\r\n    query: '',\r\n    isLoading: false\r\n});","import React, { useContext, useEffect } from 'react';\r\nimport { Context } from './context';\r\n\r\nimport './bookcard.scss';\r\n\r\nconst BookCard = ({books}) => {\r\n  const { data, isLoading } = useContext(Context);\r\n  console.log(data);\r\n\r\n  return (\r\n    <div className='book-cards'>\r\n    { isLoading ? (<div>Loading ...</div>) : (\r\n      <ul>\r\n        {Object.keys(books).length > 0 && \r\n          books.items.map((item) => (\r\n            <li key={item.id}>\r\n              <div className='book-card'>\r\n                <img src={`${item.volumeInfo.imageLinks.smallThumbnail}`} alt={`${item.volumeInfo.title}`}/>\r\n                <div>{`Title: ${item.volumeInfo.title}`}</div>\r\n                <div>{`Author: ${item.volumeInfo.authors                                                                                                                                                                                                                }`}</div>\r\n                <div>{ `Publisher: ${item.volumeInfo.publisher}`}</div>\r\n                <a href={`${item.volumeInfo.publisher}`}>More Info</a>\r\n              </div>\r\n            </li>\r\n          ))\r\n          }\r\n        </ul>                \r\n      )}\r\n    </div>\r\n)};\r\n\r\nexport default BookCard;\r\n                            \r\n","import React, { Fragment, useState, useEffect, useRef, useContext } from 'react';\r\nimport { useFetchData } from './hooks';\r\nimport BookCard from './bookcard';\r\nimport { Context } from './context';\r\n\r\n//styles\r\nimport './searchbar.scss';\r\n\r\nconst SearchBar = ()=> {\r\n  const {query, setQuery, isLoading, setIsLoading, data, setData, error, setIsError} = useContext(Context);\r\n  const [isEmpty, setIsEmpty] = useState(false);\r\n  const input = useRef();\r\n\r\n  console.log(data);\r\n\r\nuseEffect(() => {\r\n  input.current.focus();\r\n}, [data]);\r\n\r\nconst handleClose = (e) => {\r\n  e.preventDefault();\r\n  setQuery('');\r\n};\r\n\r\nconst updateQuery = (e) => {\r\n  setQuery(e.target.value);\r\n};\r\n\r\nconst handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n  setIsLoading(true);\r\n  setIsError(false);\r\n  const key = 'AIzaSyCxeE_F8Evvzj21h51vdXtYPZvcIsTvAn0';\r\n  const url = 'https://www.googleapis.com/books/v1/volumes';\r\n  const startIndex = 0;\r\n  const maxResults = 10;\r\n  const mainUrl = `${url}?q=${query}&startIndex=${startIndex}&maxResults=${maxResults}&key=${key}`;\r\n  if (!query.length) {\r\n    setIsEmpty(true);\r\n  } else {\r\n    try {\r\n      const response = await fetch(mainUrl);\r\n      if(!response.ok){ \r\n        throw Error(response.status);\r\n      } \r\n      const json = await response.json();\r\n      setData(json); \r\n      setIsLoading(false);  \r\n        \r\n    } catch(err) {\r\n      if(err.message === '404'){\r\n        console.log('We were unable to connect with Google Books');\r\n      } else if(err.message === '400'){\r\n        console.log('Something went wrong with the Google Books API key.')\r\n       }\r\n    }\r\n  }\r\n}\r\n\r\nreturn (\r\n    <form onSubmit={handleSubmit}>\r\n        <div className='search-bar'>\r\n            <label htmlFor='search'>Search for a book: </label>\r\n            <input type='text' id='search' value={query} onChange={updateQuery} ref={input}/>\r\n            {query.length !== 0 && <button onClick={handleClose} className=\"close-btn\">&times;</button>}\r\n            <button type='submit'>Search</button>\r\n        </div>\r\n        {isEmpty && <span>Please provide a search query.</span>}\r\n    </form>\r\n)\r\n}\r\n\r\nexport default SearchBar;","import React, { useContext, useEffect } from 'react';\r\n\r\nimport BookCard from './bookcard';\r\nimport { Context } from './context';\r\n//import Spinner from './Spinner';\r\n\r\n//import '../styles/books.scss';\r\n\r\nexport default function Books() {\r\n  const { data, isLoading } = useContext(Context);\r\n  let books = (typeof(data) === 'undefined' ? {} : data);\r\n  \r\n  if (books) {\r\n    if (books.totalItems === 0) {\r\n      return <span className=\"holderText\">Nothing was found. Try another search!</span>\r\n    }\r\n  }; \r\n\r\n  return (\r\n    <div className=\"books\">\r\n      {Object.keys(books).length === 0 ? \r\n      <span className=\"holderText\">Try searching for a book! Any book!</span> : <BookCard books={books} />}\r\n    </div>\r\n  )\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Fragment, useState } from 'react';\nimport './App.css';\nimport { Context } from './Components/context';\nimport SearchBar from './Components/searchbar';\nimport BookGrid from './Components/books';\n\nexport default function App() {\n    const [data, setData] = useState();\n    const [query, setQuery] = useState([]);\n    const [search, setSearch] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const [url, setUrl] = useState();\n    \n    return (\n       <Context.Provider value={{ data, setData, query, setQuery, search, setSearch, isLoading, setIsLoading, isError, setIsError, url, setUrl}}> \n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Book Finder App</h1>\n            </header>\n            <SearchBar />\n            <BookGrid />\n        </div>\n      </Context.Provider>\n    );\n}\n\n//export default App;\n"],"sourceRoot":""}